openapi: 3.0.0
servers:
  - url: /rnaget
info:
  title: RNAget API
  description: |
    ## Design principles

    This API provides a means of retrieving data from several types of RNA experiments including:

    * Feature-level expression data from RNA-seq type measurements
    * Coordinate-based signal/intensity data similar to a bigwig representation

    via a client/server model.

    Features of this API include:

    * Support for a hierarchical data model which provides the option for servers to associate expression data for discovery and retrieval
    * Support for accessing subsets of expression data through slicing operations on the expression matrix and/or query filters to specify features to be included
    * Support for accessing signal/intensity data by specifying a range of genomic coordinates to be included

    Out of the scope of this API are:

    * A means of retrieving primary (raw) read sequence data. Input samples are identified in expression output and data servers should implement additional API(s) to allow for search and retrieval of raw reads. The [htsget API](https://samtools.github.io/hts-specs/htsget.html) is designed for retrieval of read data.
    * A means of retrieving reference sequences. Servers should implement additional API(s) to allow for search and retrieval of reference base sequences. The [refget API](https://samtools.github.io/hts-specs/refget.html) is designed for retrieval of references sequences.
    * A means of retrieving feature annotation details. Expression matrices provide the identity of each mapped feature. Servers should implement additional API(s) to allow for search and retrieval of genomic feature annotation details.

    ## OpenAPI Description

    An OpenAPI description of this specification is available and [describes the 1.2.0 version](rnaget-openapi.yaml). OpenAPI is an independent API description format for describing REST services and is compatible with a number of [third party tools](http://openapi.tools/).

    ## Compliance

    Implementors can check if their RNAget implementations conform to the
    specification by using our [compliance suite](https://github.com/ga4gh-rnaseq/rnaget-compliance-suite).

    ## Protocol essentials

    All API invocations are made to a configurable HTTPS endpoint, receive URL-encoded query string parameters and HTTP headers, and return text or other allowed formatting as requested by the user. Queries containing [unsafe or reserved](https://www.ietf.org/rfc/rfc1738.txt) characters in the URL, including but not limited to "&", "/", "#", MUST encode all such characters.  Successful requests result with HTTP status code 200 and have the appropriate text encoding in the response body as defined for each endpoint. The server may provide responses with chunked transfer encoding. The client and server may mutually negotiate HTTP/2 upgrade using the standard mechanism.

    HTTP responses may be compressed using [RFC 2616](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html) transfer-coding, not content-coding.

    HTTP response may include a 3XX response code and Location header redirecting the client to retrieve expression data from an alternate location as specified by [RFC 7231](https://tools.ietf.org/html/rfc7231), clients SHOULD be configured to follow redirects. `302`, `303` and `307` are all valid response codes to use.

    Responses from the server MUST include a Content-Type header containing the encoding for the invoked method and protocol version.  Unless negotiated with the client and allowed by the server, the default encoding is:

    ```
    Content-Type: application/vnd.ga4gh.rnaget.v1.2.0+json; charset=us-ascii
    ```

    All response objects from the server are expected to be in JSON format, regardless of the response status code, unless otherwise negotiated with the client and allowed by the server.

    Object IDs are intended for persistent retrieval of their respective objects.  An object ID MUST uniquely identify an object within the scope of a single data server.  It is beyond the scope of this API to enforce uniqueness of ID among different data servers.  IDs are strings made up of uppercase and lowercase letters, decimal digits, hypen, period, underscore and tilde [A-Za-z0-9.-_~]. See [RFC 3986 ยง 2.3](https://tools.ietf.org/html/rfc3986#section-2.3).

    Endpoints are described as HTTPS GET methods which will be sufficient for most queries.  Queries containing multiple metadata filters may approach or exceed the URL length limits.  To handle these types of queries it is recommended that servers SHOULD implement parallel HTTPS POST endpoints accepting the same URL parameters as a UTF8-encoded JSON key-value dictionary.

    When processing requests containing multiple filters and filters with lists of items, the data provider MUST use a logical `AND` for selecting the results to return.

    ## Internet Media Types Handling

    When responding to a request a server MUST use the fully specified media type for that endpoint. When determining if a request is well-formed, a server MUST allow a internet type to degrade like so

      - `application/vnd.ga4gh.rnaget.v1.2.0+json; charset=us-ascii`
      - `application/vnd.ga4gh.rnaget.v1.2.0+json`
      - `application/json`    

    ## Errors

    The server MUST respond with an appropriate HTTP status code (4xx or 5xx) when an error condition is detected. In the case of transient server errors (e.g., 503 and other 5xx status codes), the client SHOULD implement appropriate retry logic. For example, if a client sends an alphanumeric string for a parameter that is specified as unsigned integer the server MUST reply with `Bad Request`.

    | Error type        | HTTP status code | Description
    |-------------------|------------------|-------------|
    | `Bad Request`     | 400 | Cannot process due to malformed request, the requested parameters do not adhere to the specification |
    | `Unauthorized`    | 401 | Authorization provided is invalid |
    | `Not Found`       | 404 | The resource requested was not found |
    | `Not Acceptable`  | 406 | The requested formatting is not supported by the server |
    | `Not Implemented` | 501 | The specified request is not supported by the server |

    ## Security

    The RNAget API can be used to retrieve potentially sensitive genomic data and is dependent on the implementation.  Effective security measures are essential to protect the integrity and confidentiality of these data.

    Sensitive information transmitted on public networks, such as access tokens and human genomic data, MUST be protected using Transport Level Security (TLS) version 1.2 or later, as specified in [RFC 5246](https://tools.ietf.org/html/rfc5246).

    If the data holder requires client authentication and/or authorization, then the client's HTTPS API request MUST present an OAuth 2.0 bearer access token as specified in [RFC 6750](https://tools.ietf.org/html/rfc6750), in the Authorization request header field with the Bearer authentication scheme:

    ```
    Authorization: Bearer [access_token]
    ```

    Data providers SHOULD verify user identity and credentials.  The policies and processes used to perform user authentication and authorization, and the means through which access tokens are issued, are beyond the scope of this API specification. GA4GH recommends the use of the OAuth 2.0 framework ([RFC 6749](https://tools.ietf.org/html/rfc6749)) for authentication and authorization.  It is also recommended that implementations of this standard also implement and follow the GA4GH [Authentication and Authorization Infrastructure (AAI) standard](https://docs.google.com/document/d/1zzsuNtbNY7agPRjfTe6gbWJ3BU6eX19JjWRKvkFg1ow).

    ## CORS
    Cross-origin resource sharing (CORS) is an essential technique used to overcome the same origin content policy seen in browsers. This policy restricts a webpage from making a request to another website and leaking potentially sensitive information. However the same origin policy is a barrier to using open APIs. GA4GH open API implementers should enable CORS to an acceptable level as defined by their internal policy. For any public API implementations should allow requests from any server.

    GA4GH is publishing a [CORS best practices document](https://docs.google.com/document/d/1Ifiik9afTO-CEpWGKEZ5TlixQ6tiKcvug4XLd9GNcqo/edit?usp=sharing), which implementers should refer to for guidance when enabling CORS on public API instances.

    ## Filtering Results
    Some endpoints describe optional filters to select and limit the results returned.  Requests supplying none of the filters may return large amounts of data and expose the data provider to the risk of Distributed Denial of Service (DDoS) attacks.  Implementors SHOULD limit the size of return matrices to an appropriate value which their server can support.

    ## Possible Future API Enhancements

    - Allow OR for search filters
    - Report size of download file
    - Matrix slicing with bool array or list of indices

    ## API specification change log

    1.2.0    Adds parameters and endpoint to specify matrix units
             Add sample filtering by min and/or max values
    1.1.0    Adds /service-info endpoint
    1.0.0    Initial release version

  version: 2.0.0
  contact:
    name: GA4GH RNA-seq Working Group
    email: ga4gh-rnaseq@ga4gh.org
  license:
    name: Apache 2.0
    url: https://github.com/ga4gh-rnaseq/schema/blob/master/LICENSE
externalDocs:
  description: Find out more about GA4GH
  url: http://ga4gh.org
tags:
  - name: expressions
    description: This resources 
x-tagGroups:
  - name: Interface
    tags:
      - projects
      - studies
      - expressions
      - continuous
      - Service Info
  - name: Models
    tags:
      - sampleModel
      - countModel
      - filterModel
      - ticketModel

paths:

  /expressions:
    get:
      tags:
        - expressions
      summary: paginated list of expressions
      description: returns a paginated list of expressions
      operationId: getExpressionsInfo
      parameters:
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/limitParam"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: https://raw.githubusercontent.com/ga4gh-beacon/beacon-v2/main/models/src/beacon-v2-default-model/datasets/defaultSchema.yaml
                  total:
                    type: number
                    format: integer
        "501":
          description: The specified request is not supported by the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
      security:
        - rnaget_auth:
            - read:expression

  "/expressions/{expressionId}":
    get:
      tags:
        - expressions
      summary: Get specific expression matrix
      description: Returns an expression matrix, default is json
      operationId: getExpressionById
      parameters:
        - name: expressionId
          in: path
          description: ID of expression to return
          required: true
          schema:
            type:
              string
        - $ref: "#/components/parameters/downloadParam"
        - $ref: "#/components/parameters/formatParam" #this should be an enum


      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: https://raw.githubusercontent.com/ga4gh-beacon/beacon-v2/main/models/src/beacon-v2-default-model/datasets/defaultSchema.yaml
            application/octet-stream:
              schema:
                type: string
                format: binary
            application/vnd.loom:
              schema:
                type: string
                format: binary
            text/tab-separated-values:
              schema:
                type: string
                format: binary
        "400":
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "404":
          description: Expression not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "406":
          description: Requested formatting not supported
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "501":
          description: The specified request is not supported by the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
      security:
        - rnaget_auth:
            - read:expression
            
  "/expressions/{expressionId}/features":
    get:
      tags:
        - expressions
      summary: Get list of features contained in the matrix
      description: Returns a paginated list of features
      operationId: getExpressionIDFeatures
      parameters:
        - name: expressionId
          in: path
          description: ID of expression to return
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/limitParam"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: 
                    type: array
                    items:
                      $ref: "https://raw.githubusercontent.com/ga4gh/vrs/main/schema/vrs.yaml#/definitions/Feature"
                  total:
                    type: number
                    format: integer
                  
        "400":
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "404":
          description: Expression not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "406":
          description: Requested formatting not supported
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "501":
          description: The specified request is not supported by the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
      security:
        - rnaget_auth:
            - read:expression
            
  "/expressions/{expressionId}/samples":
    get:
      tags:
        - expressions
      summary: Get list of samples contained in the matrix
      description: Returns a paginated list of samples
      operationId: getExpressionIDSamples
      parameters:
        - name: expressionId
          in: path
          description: ID of expression to return
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/limitParam"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                 data: 
                  type: array
                  items:
                   $ref: "https://raw.githubusercontent.com/ga4gh-beacon/beacon-v2/main/models/src/beacon-v2-default-model/biosamples/defaultSchema.yaml"
                 total:
                  type: number
                  format: integer
        "400":
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "404":
          description: Expression not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "406":
          description: Requested formatting not supported
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "501":
          description: The specified request is not supported by the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
      security:
        - rnaget_auth:
            - read:expression
            
  "/expressions/{expressionId}/counts":
    get:
      tags:
        - expressions
      summary: Get specific expression data ticket
      description: Returns a ticket to download a single specified expression matrix
      operationId: getExpressionTicketById
      parameters:
        - name: expressionId
          in: path
          description: ID of expression to return
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/sampleIDListParam"
        - $ref: "#/components/parameters/featureIDListParam"
        - $ref: "#/components/parameters/featureNameListParam"
        - $ref: "#/components/parameters/minValueParam"
        - $ref: "#/components/parameters/maxValueParam"
        - $ref: "#/components/parameters/unitsParam"
        - $ref: "#/components/parameters/sortFieldParam"
        - $ref: "#/components/parameters/sortValueParam"

      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                 data: 
                  type: array
                  items:
                   $ref: "#/components/schemas/count"
                 total:
                  type: number
                  format: integer
                
        "400":
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "404":
          description: Expression not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "406":
          description: Requested formatting not supported
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "501":
          description: The specified request is not supported by the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
      security:
        - rnaget_auth:
            - read:expression

components:
  securitySchemes:
    rnaget_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://ga4gh.org/oauth/dialog
          scopes:
            read:expression: read expression data
            read:continuous: read continuous data
            read:project: read information about projects
            read:study: read information about studies
            read:info: read general info
  schemas:
    count:
      type: object
      description: The count object holds the expression value for each gene in each sample
      properties:
        expressionId:
          type: string
          description: The expression unique identifier
        sampleId:
          type: string
          description: the sample unique idenfier
        featureId:
          type: string
          description: the sequence feature unique identifier
        unit:
          type: string
          description: the count unit
          example: TPM
        value:
          type: number
          description: the value number
      required:
      - expressionId
      - sampleId
      - featureId
      - value
      externalDocs:
        description: Find out more
        url: https://github.com/ga4gh-rnaseq/schema


    filter:
      type: object
      description: Implementation defined parameter to use for filtering collections
      properties:
        filter:
          type: string
          description: A unique name for the filter for use in query URLs
          example: tissue
        fieldType:
          type: string
          description: The dataType (string, float, etc.) of the filter
          example: string
        description:
          type: string
          description: Detailed description of the filter
          example: tissue of origin
        values:
          type: array
          items:
            type: string
            example: liver
          description: List of supported values for the filter
      required:
      - filter
      externalDocs:
        description: Find out more
        url: https://github.com/ga4gh-rnaseq/schema
    error:
      type: object
      description: General API error model
      properties:
        message:
          type: string
          description: Error message details

  parameters:

    sampleIDListParam:
      name: sampleIDList
      in: query
      description: return only values for listed sampleIDs
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    featureIDListParam:
      name: featureIDList
      in: query
      description: return only values for listed feature IDs
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    featureNameListParam:
      name: featureNameList
      in: query
      description: return only values for listed features
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    chrParam:
      name: chr
      in: query
      description: The refererence to which start and end apply in the form chr? where ? is the specific ID of the chromosome (ex. chr1, chrX).
      required: false
      schema:
        type: string
      example:
        chr10
    startParam:
      name: start
      in: query
      description: The start position of the range on the sequence, 0-based, inclusive.
      required: false
      schema:
        type: integer
        format: int32
        minimum: 0
    endParam:
      name: end
      in: query
      description: The end position of the range on the sequence, 0-based, exclusive.
      required: false
      schema:
        type: integer
        format: int32
        minimum: 0
    sortFieldParam:
      name: sortField
      in: query
      description: The field to sort
      required: false
      schema:
        type: string
    sortValueParam:
      name: sortField
      in: query
      description: How to sort
      required: false
      schema:
        type: string
        enum: [asc, desc]
    minValueParam:
      name: minValue
      in: query
      description: Sets a minimum expression value for features. If set the resulting matrix will not contain any features with a value less than the provided threshold in any sample in the matrix. The resulting matrix should have values >= the supplied threshold in every cell. Using this with feature_max_value will result in matrix values in the closed interval [feature_min_value, feature_max_value].
      required: false
      schema:
        type: number
        format: float
        minimum: 0.0
    maxValueParam:
      in: query
      name: maxValue
      description: Sets a maximum expression value for features. If set the resulting matrix will not contain any features with a value greater than the provided threshold in any sample in the matrix. The resulting matrix should have values <= the supplied threshold in every cell. Using this with feature_min_value will result in matrix values in the closed interval [feature_min_value, feature_max_value].
      required: false
      schema:
        type: number
        format: float
        minimum: 0.0
    unitsParam:
      name: units
      in: query
      description: The values in the matrix will be those corresponding to the requested units.  If present the value provided MUST match an item in the list returned by a request to /expressions/units.
      required: false
      schema:
        type: string
      example:
        TPM
    downloadParam:
      name: download
      in: query
      required: false
      style: form
      schema:
        type: boolean
        default: false
    formatParam:
      name: format
      in: query
      description: response format
      required: false
      schema: 
        type: string
        default: json
      example:
        json
    offsetParam:
      in: query
      name: offset
      description: How many records to skip from the beginning in the results. Default value is 0
      required: false
      schema:
        type: number
        format: integer
        default: 0
        minimum: 0
    limitParam:
      in: query
      name: limit
      description: The maximum number of records to retrieve. Default value is 100. If the full result set is to be fetched, the limit should be set to 0.
      required: false
      schema:
        type: number
        format: integer
        default: 100
        minimum: 0  
